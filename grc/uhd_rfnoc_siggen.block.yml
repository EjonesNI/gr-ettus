# auto-generated by grc.converter

id: uhd_rfnoc_streamer_siggen
label: 'RFNoC: SigGen'

parameters:
-   id: frequency
    label: Frequency
    dtype: real
    default: '0.1'
-   id: spp
    label: Packet Size
    dtype: int
    default: '364'
-   id: enable
    label: Enable
    dtype: int
    options: ['1', '0']
    option_labels: ['True', 'False']
-   id: gain
    label: Gain
    dtype: real
    default: '1.0'
-   id: amplitude
    label: Amplitude
    dtype: complex
    default: '1.0'
-   id: samp_rate
    label: Sample Rate
    dtype: real
    default: '10000000'
-   id: waveform
    label: Waveform
    dtype: string
    options: ['"CONSTANT"', '"SINE_WAVE"', '"COSINE"', '"SQUARE"', '"TRIANGLE"', '"SAW_TOOTH"']
    option_labels: [Constant, Sine, Cosine, Sqaure, Triangle, Saw Tooth]
-   id: block_index
    label: SigGen Select
    category: RFNoC Config
    dtype: int
    default: '-1'
    hide: ${ ('part' if int(block_index) < 0 else 'none') }
-   id: device_index
    label: Device Select
    category: RFNoC Config
    dtype: int
    default: '-1'
    hide: ${ ('part' if int(device_index) < 0 else 'none') }
-   id: grvlen
    label: Force Vector Length
    dtype: int
    default: '1'
    hide: ${ ('part' if grvlen == 1 else 'none') }
-   id: fpga_module_name
    label: FPGA Module Name
    category: RFNoC Config
    dtype: string
    default: noc_block_siggen
    hide: all

outputs:
-   domain: rfnoc
    dtype: complex
    vlen: ${ grvlen }

templates:
    imports: import ettus
    make: |-
        ettus.rfnoc_generic(
           self.device3,
           uhd.stream_args( 
               cpu_format="fc32",=
               otw_format="sc16",
               args="",
           ),
           uhd.stream_args( \# RX Stream Args
               cpu_format="fc32",
               otw_format="sc16",
               args="",
           ),
           "SigGen", ${block_index}, ${device_index},
        )
        self.$(id).set_arg("spp",  ${spp})
        self.$(id).set_arg("frequency", ((2*${frequency})/${samp_rate}))
        self.$(id).set_arg("waveform", ${waveform})
        self.$(id).set_arg("gain", ${gain})
        self.$(id).set_arg("enable", ${enable})
        self.$(id).set_arg("amplitude_i",  ${(amplitude).real})
        self.$(id).set_arg("amplitude_q",  ${(amplitude).imag})
    callbacks:
    - set_arg("frequency", ((2*${frequency})/${samp_rate}))
    - set_arg("gain", ${gain})
    - set_arg("enable", ${enable})
    - set_arg("amplitude_i", ${amplitude}.real)
    - set_arg("amplitude_q", ${amplitude}.imag)
    - set_arg("waveform", ${waveform})
    - set_arg("spp", ${spp})

file_format: 1
